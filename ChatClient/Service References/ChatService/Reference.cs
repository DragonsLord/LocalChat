//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ExceptionType", Namespace="http://schemas.datacontract.org/2004/07/Contracts")]
    public enum ExceptionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        UserAlreadyRegisterd = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmptyOrUnknownRecieverList = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FileNotFound = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ErrorDuringDataTransfer = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Contracts")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AuthorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<ChatClient.ChatService.DataLink> DataLinksField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDataAttachedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.List<string> RecieversField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Author {
            get {
                return this.AuthorField;
            }
            set {
                if ((object.ReferenceEquals(this.AuthorField, value) != true)) {
                    this.AuthorField = value;
                    this.RaisePropertyChanged("Author");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<ChatClient.ChatService.DataLink> DataLinks {
            get {
                return this.DataLinksField;
            }
            set {
                if ((object.ReferenceEquals(this.DataLinksField, value) != true)) {
                    this.DataLinksField = value;
                    this.RaisePropertyChanged("DataLinks");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDataAttached {
            get {
                return this.IsDataAttachedField;
            }
            set {
                if ((this.IsDataAttachedField.Equals(value) != true)) {
                    this.IsDataAttachedField = value;
                    this.RaisePropertyChanged("IsDataAttached");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.List<string> Recievers {
            get {
                return this.RecieversField;
            }
            set {
                if ((object.ReferenceEquals(this.RecieversField, value) != true)) {
                    this.RecieversField = value;
                    this.RaisePropertyChanged("Recievers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DataLink", Namespace="http://schemas.datacontract.org/2004/07/Contracts")]
    [System.SerializableAttribute()]
    public partial class DataLink : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LengthField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Adress {
            get {
                return this.AdressField;
            }
            set {
                if ((object.ReferenceEquals(this.AdressField, value) != true)) {
                    this.AdressField = value;
                    this.RaisePropertyChanged("Adress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatProvider", CallbackContract=typeof(ChatClient.ChatService.IChatProviderCallback))]
    public interface IChatProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/RegisterNewUser", ReplyAction="http://tempuri.org/IChatProvider/RegisterNewUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ChatClient.ChatService.ExceptionType), Action="http://tempuri.org/IChatProvider/RegisterNewUserExceptionTypeFault", Name="ExceptionType", Namespace="http://schemas.datacontract.org/2004/07/Contracts")]
        void RegisterNewUser(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/RegisterNewUser", ReplyAction="http://tempuri.org/IChatProvider/RegisterNewUserResponse")]
        System.Threading.Tasks.Task RegisterNewUserAsync(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/UnregisterUser", ReplyAction="http://tempuri.org/IChatProvider/UnregisterUserResponse")]
        void UnregisterUser(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/UnregisterUser", ReplyAction="http://tempuri.org/IChatProvider/UnregisterUserResponse")]
        System.Threading.Tasks.Task UnregisterUserAsync(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/GetUsersList", ReplyAction="http://tempuri.org/IChatProvider/GetUsersListResponse")]
        System.Collections.Generic.List<string> GetUsersList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/GetUsersList", ReplyAction="http://tempuri.org/IChatProvider/GetUsersListResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUsersListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatProvider/SendMessage")]
        void SendMessage(ChatClient.ChatService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatProvider/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(ChatClient.ChatService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/DownloadData", ReplyAction="http://tempuri.org/IChatProvider/DownloadDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ChatClient.ChatService.ExceptionType), Action="http://tempuri.org/IChatProvider/DownloadDataExceptionTypeFault", Name="ExceptionType", Namespace="http://schemas.datacontract.org/2004/07/Contracts")]
        byte[] DownloadData(string file_adress, int buffer_size);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/DownloadData", ReplyAction="http://tempuri.org/IChatProvider/DownloadDataResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadDataAsync(string file_adress, int buffer_size);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatProviderCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatProvider/Write")]
        void Write(ChatClient.ChatService.Message message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatProvider/Disconnect")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatProvider/NewUserRegistered")]
        void NewUserRegistered(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatProvider/UserUnregistered")]
        void UserUnregistered(string user_name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatProvider/Upload", ReplyAction="http://tempuri.org/IChatProvider/UploadResponse")]
        byte[] Upload(int buffer_size, int file_index);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatProviderChannel : ChatClient.ChatService.IChatProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatProviderClient : System.ServiceModel.DuplexClientBase<ChatClient.ChatService.IChatProvider>, ChatClient.ChatService.IChatProvider {
        
        public ChatProviderClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatProviderClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatProviderClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatProviderClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatProviderClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterNewUser(string user_name) {
            base.Channel.RegisterNewUser(user_name);
        }
        
        public System.Threading.Tasks.Task RegisterNewUserAsync(string user_name) {
            return base.Channel.RegisterNewUserAsync(user_name);
        }
        
        public void UnregisterUser(string user_name) {
            base.Channel.UnregisterUser(user_name);
        }
        
        public System.Threading.Tasks.Task UnregisterUserAsync(string user_name) {
            return base.Channel.UnregisterUserAsync(user_name);
        }
        
        public System.Collections.Generic.List<string> GetUsersList() {
            return base.Channel.GetUsersList();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<string>> GetUsersListAsync() {
            return base.Channel.GetUsersListAsync();
        }
        
        public void SendMessage(ChatClient.ChatService.Message message) {
            base.Channel.SendMessage(message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(ChatClient.ChatService.Message message) {
            return base.Channel.SendMessageAsync(message);
        }
        
        public byte[] DownloadData(string file_adress, int buffer_size) {
            return base.Channel.DownloadData(file_adress, buffer_size);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadDataAsync(string file_adress, int buffer_size) {
            return base.Channel.DownloadDataAsync(file_adress, buffer_size);
        }
    }
}
